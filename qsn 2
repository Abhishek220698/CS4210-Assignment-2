
#-------------------------------------------------------------------------
# AUTHOR: your name
# FILENAME: title of the source file
# SPECIFICATION: description of the program
# FOR: CS 4210- Assignment #2
# TIME SPENT: how long it took you to complete the assignment
#-----------------------------------------------------------*/

#IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard vectors and arrays

#importing some Python libraries
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import csv

dataSets = ['contact_lens_training_1.csv', 'contact_lens_training_2.csv', 'contact_lens_training_3.csv']

for ds in dataSets:

    dbTraining = []
    X = []
    Y = []

    #reading the training data in a csv file
    with open(ds, 'r') as csvfile:
         reader = csv.reader(csvfile)
         for i, row in enumerate(reader):
             if i > 0: #skipping the header
                dbTraining.append (row)

    #transform the original training features to numbers and add to the 4D array X. For instance Young = 1, Prepresbyopic = 2, Presbyopic = 3, so X = [[1, 1, 1, 1], [2, 2, 2, 2], ...]]
    #--> add your Python code here
    # Age : young = 1, prepresbyopic = 2, Presbyopic = 3
    # Spectacle Prescription : Myope = 1, Hypermetrope = 2
    # Astigmatism : yes = 1, No = 2
    # Tear Production Rate : Normal = 1, Reduced = 2
    X = [
          [1, 1, 1, 1],
          [1, 2, 1, 1],
          [1, 1, 1, 1],
          [2, 1, 1, 1],
          [2, 2, 2, 2],
          [2, 2, 1, 1],
          [3, 1, 1, 1],
          [3, 2, 1, 1],
        ]



    #transform the original training classes to numbers and add to the vector Y. For instance Yes = 1, No = 2, so Y = [1, 1, 2, 2, ...]
    #--> add your Python code here
    # Recommended Lenses : Yes = 1, No = 2
    Y = [1, 1, 1, 1, 2, 2, 1, 2]

    #loop your training and test tasks 10 times here
    for i in range (10):

       #fitting the decision tree to the data setting max_depth=3
       clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth=3)
       clf = clf.fit(X, Y)

       #read the test data and add this data to dbTest
       #--> add your Python code here
       dbTest = []
       with open('contact_lens_test.csv', 'r') as csvfile:
           reader = csv.reader(csvfile)
           for i, row in enumerate(reader):
               if i > 0:  # skipping the header
                   dbTest.append(row)


       for data in dbTest:
           #transform the features of the test instances to numbers following the same strategy done during training, and then use the decision tree to make the class prediction. For instance:
           #class_predicted = clf.predict([[3, 1, 2, 1]])[0]           -> [0] is used to get an integer as the predicted class label so that you can compare it with the true label
           #--> add your Python code here

           X_test = [
                 [1, 1, 2, 1],
                 [1, 2, 2, 1],
                 [1, 1, 2, 2],
                 [3, 2, 2, 2],
                 [3, 1, 2, 1],
                 [3, 1, 1, 2],
                 [2, 1, 1, 1],
                 [2, 1, 2, 2],
               ]
           Y_test = [1, 1, 2, 2, 2, 2, 1, 2]
           testdata = (X_test, Y_test)

           for i in range(10):

                class_predicted = clf.predict(testdata)[0]





           #compare the prediction with the true label (located at data[4]) of the test instance to start calculating the accuracy.
           #--> add your Python code here
           if (data[4]==yes):
               truelabel = 1
           elif (data[4]==No):
               truelabel = 2
           if (truelabel == 1 and class_predicted == 1):
               true_positive = 1
           if (truelabel == 2 and class_predicted == 2):
               true_negative = 1


        #find the lowest accuracy of this model during the 10 runs (training and test set)
        #--> add your Python code here
       l_acc = (true_positive + true_negative) / total_count
       if (l_acc < accuracy):
           accuracy = l_acc



    #print the lowest accuracy of this model during the 10 runs (training and test set) and save it.
    #your output should be something like that: final accuracy when training on contact_lens_training_1.csv: 0.2
    #--> add your Python code here
    print("final accuracy when training on")





